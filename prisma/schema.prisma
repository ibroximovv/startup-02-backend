// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                  String              @id @default(uuid())
  email               String
  password            String
  image               String?
  username            String
  bio                 String?
  isVerifiedTeacher   String?
  firstName           String
  lastName            String
  level               DirectionLevel
  role                UserRole            @default(STUDENT)
  additionalDirection String?
  direction           Direction?          @relation(fields: [directionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  directionId         String?
  Friends             Friends[]           @relation("UserFriends")
  FriendOf            Friends[]           @relation("FriendOf")
  FriendMessage       FriendMessage[]
  Groups              Groups[]
  GroupMembers        GroupMembers[]
  GroupMessages       GroupMessages[]
  Plans               Plans[]
  LessonEnrollments   LessonEnrollments[]
  LessonRatings       LessonRatings[]
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @default(now())
  Challenges          Challenges[]
  Lesson              Lesson[]
}

enum DirectionLevel {
  BEGINNER
  MIDDLE
  STRONGMIDDLE
  SENIOR
}

enum UserRole {
  ADMIN
  OWNER
  TEACHER
  STUDENT
}

model Direction {
  id            String   @id @default(uuid())
  directionName String
  Users         Users[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model Friends {
  id            String          @id @default(uuid())
  friend        Users           @relation("FriendOf", fields: [friendId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  friendId      String
  user          Users           @relation("UserFriends", fields: [usersId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  usersId       String
  status        FriendStatus
  offer         Boolean         @default(true)
  FriendMessage FriendMessage[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
}

enum FriendStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

model FriendMessage {
  id         String   @id @default(uuid())
  friendShip Friends  @relation(fields: [friendId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  friendId   String
  sender     Users    @relation(fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId   String
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model Groups {
  id            String          @id @default(uuid())
  name          String
  description   String?
  owner         Users           @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId       String
  GroupMembers  GroupMembers[]
  GroupMessages GroupMessages[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
}

model GroupMembers {
  id        String            @id @default(uuid())
  group     Groups            @relation(fields: [groupsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupsId  String
  users     Users             @relation(fields: [usersId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  usersId   String
  role      GroupMemebersRole @default(USER)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now())
}

enum GroupMemebersRole {
  ADMIN
  OWNER
  USER
}

model GroupMessages {
  id        String   @id @default(uuid())
  group     Groups   @relation(fields: [groupsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupsId  String
  sender    Users    @relation(fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId  String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Plans {
  id          String     @id @default(uuid())
  users       Users      @relation(fields: [usersId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  usersId     String
  title       String
  description String?
  targetDate  DateTime
  status      PlanStatus @default(IN_PROGRESS)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
}

enum PlanStatus {
  IN_PROGRESS
  COMPLETED
}

model Challenges {
  id        String   @id @default(uuid())
  owner     Users    @relation(fields: [ownerId], references: [id])
  title     String
  goal      String?
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  ownerId   String
}

model Lesson {
  id                String              @id @default(uuid())
  title             String
  date              DateTime
  description       String
  meetingUrl        String?
  mode              LessonMode          @default(OFFLINE)
  location          String?
  LessonEnrollments LessonEnrollments[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())
  teacher           Users               @relation(fields: [teacherId], references: [id])
  teacherId         String
}

enum LessonMode {
  OFFLINE
  ONLINE
}

model LessonEnrollments {
  id            String                 @id @default(uuid())
  lesson        Lesson                 @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lessonId      String
  student       Users                  @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId     String
  status        LessonEnrollmentStatus @default(PENDING)
  LessonRatings LessonRatings[]
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @default(now())
}

enum LessonEnrollmentStatus {
  PENDING
  APPROVED
  COMPLETED
}

model LessonRatings {
  id                  String            @id @default(uuid())
  lesson              LessonEnrollments @relation(fields: [lessonEnrollmentsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lessonEnrollmentsId String
  student             Users             @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId           String
  rating              Int               @default(5)
  comment             String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @default(now())
}
